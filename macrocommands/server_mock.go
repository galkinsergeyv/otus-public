// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package macrocommands is a generated GoMock package.
package macrocommands

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICommand is a mock of ICommand interface.
type MockICommand struct {
	ctrl     *gomock.Controller
	recorder *MockICommandMockRecorder
}

// MockICommandMockRecorder is the mock recorder for MockICommand.
type MockICommandMockRecorder struct {
	mock *MockICommand
}

// NewMockICommand creates a new mock instance.
func NewMockICommand(ctrl *gomock.Controller) *MockICommand {
	mock := &MockICommand{ctrl: ctrl}
	mock.recorder = &MockICommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommand) EXPECT() *MockICommandMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockICommand) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockICommandMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockICommand)(nil).Execute))
}

// MockIMovable is a mock of IMovable interface.
type MockIMovable struct {
	ctrl     *gomock.Controller
	recorder *MockIMovableMockRecorder
}

// MockIMovableMockRecorder is the mock recorder for MockIMovable.
type MockIMovableMockRecorder struct {
	mock *MockIMovable
}

// NewMockIMovable creates a new mock instance.
func NewMockIMovable(ctrl *gomock.Controller) *MockIMovable {
	mock := &MockIMovable{ctrl: ctrl}
	mock.recorder = &MockIMovableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMovable) EXPECT() *MockIMovableMockRecorder {
	return m.recorder
}

// GetPosition mocks base method.
func (m *MockIMovable) GetPosition() *Coords {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosition")
	ret0, _ := ret[0].(*Coords)
	return ret0
}

// GetPosition indicates an expected call of GetPosition.
func (mr *MockIMovableMockRecorder) GetPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockIMovable)(nil).GetPosition))
}

// GetVelocity mocks base method.
func (m *MockIMovable) GetVelocity() *Coords {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVelocity")
	ret0, _ := ret[0].(*Coords)
	return ret0
}

// GetVelocity indicates an expected call of GetVelocity.
func (mr *MockIMovableMockRecorder) GetVelocity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVelocity", reflect.TypeOf((*MockIMovable)(nil).GetVelocity))
}

// SetPosition mocks base method.
func (m *MockIMovable) SetPosition(position *Coords) Coords {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPosition", position)
	ret0, _ := ret[0].(Coords)
	return ret0
}

// SetPosition indicates an expected call of SetPosition.
func (mr *MockIMovableMockRecorder) SetPosition(position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPosition", reflect.TypeOf((*MockIMovable)(nil).SetPosition), position)
}

// MockIFuelBurnable is a mock of IFuelBurnable interface.
type MockIFuelBurnable struct {
	ctrl     *gomock.Controller
	recorder *MockIFuelBurnableMockRecorder
}

// MockIFuelBurnableMockRecorder is the mock recorder for MockIFuelBurnable.
type MockIFuelBurnableMockRecorder struct {
	mock *MockIFuelBurnable
}

// NewMockIFuelBurnable creates a new mock instance.
func NewMockIFuelBurnable(ctrl *gomock.Controller) *MockIFuelBurnable {
	mock := &MockIFuelBurnable{ctrl: ctrl}
	mock.recorder = &MockIFuelBurnableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFuelBurnable) EXPECT() *MockIFuelBurnableMockRecorder {
	return m.recorder
}

// GetLevel mocks base method.
func (m *MockIFuelBurnable) GetLevel() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockIFuelBurnableMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockIFuelBurnable)(nil).GetLevel))
}

// SetLevel mocks base method.
func (m *MockIFuelBurnable) SetLevel(level int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLevel", level)
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockIFuelBurnableMockRecorder) SetLevel(level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockIFuelBurnable)(nil).SetLevel), level)
}
