// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package star_wars is a generated GoMock package.
package star_wars

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIMovable is a mock of IMovable interface.
type MockIMovable struct {
	ctrl     *gomock.Controller
	recorder *MockIMovableMockRecorder
}

// MockIMovableMockRecorder is the mock recorder for MockIMovable.
type MockIMovableMockRecorder struct {
	mock *MockIMovable
}

// NewMockIMovable creates a new mock instance.
func NewMockIMovable(ctrl *gomock.Controller) *MockIMovable {
	mock := &MockIMovable{ctrl: ctrl}
	mock.recorder = &MockIMovableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMovable) EXPECT() *MockIMovableMockRecorder {
	return m.recorder
}

// GetPosition mocks base method.
func (m *MockIMovable) GetPosition() *Coords {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosition")
	ret0, _ := ret[0].(*Coords)
	return ret0
}

// GetPosition indicates an expected call of GetPosition.
func (mr *MockIMovableMockRecorder) GetPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockIMovable)(nil).GetPosition))
}

// GetVelocity mocks base method.
func (m *MockIMovable) GetVelocity() *Coords {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVelocity")
	ret0, _ := ret[0].(*Coords)
	return ret0
}

// GetVelocity indicates an expected call of GetVelocity.
func (mr *MockIMovableMockRecorder) GetVelocity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVelocity", reflect.TypeOf((*MockIMovable)(nil).GetVelocity))
}

// SetPosition mocks base method.
func (m *MockIMovable) SetPosition(position *Coords) Coords {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPosition", position)
	ret0, _ := ret[0].(Coords)
	return ret0
}

// SetPosition indicates an expected call of SetPosition.
func (mr *MockIMovableMockRecorder) SetPosition(position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPosition", reflect.TypeOf((*MockIMovable)(nil).SetPosition), position)
}

// MockIRotatable is a mock of IRotatable interface.
type MockIRotatable struct {
	ctrl     *gomock.Controller
	recorder *MockIRotatableMockRecorder
}

// MockIRotatableMockRecorder is the mock recorder for MockIRotatable.
type MockIRotatableMockRecorder struct {
	mock *MockIRotatable
}

// NewMockIRotatable creates a new mock instance.
func NewMockIRotatable(ctrl *gomock.Controller) *MockIRotatable {
	mock := &MockIRotatable{ctrl: ctrl}
	mock.recorder = &MockIRotatableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRotatable) EXPECT() *MockIRotatableMockRecorder {
	return m.recorder
}

// GetAngle mocks base method.
func (m *MockIRotatable) GetAngle() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAngle")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetAngle indicates an expected call of GetAngle.
func (mr *MockIRotatableMockRecorder) GetAngle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAngle", reflect.TypeOf((*MockIRotatable)(nil).GetAngle))
}

// GetPosition mocks base method.
func (m *MockIRotatable) GetPosition() *Coords {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosition")
	ret0, _ := ret[0].(*Coords)
	return ret0
}

// GetPosition indicates an expected call of GetPosition.
func (mr *MockIRotatableMockRecorder) GetPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockIRotatable)(nil).GetPosition))
}

// SetVelocity mocks base method.
func (m *MockIRotatable) SetVelocity(velocity *Coords) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVelocity", velocity)
}

// SetVelocity indicates an expected call of SetVelocity.
func (mr *MockIRotatableMockRecorder) SetVelocity(velocity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVelocity", reflect.TypeOf((*MockIRotatable)(nil).SetVelocity), velocity)
}
